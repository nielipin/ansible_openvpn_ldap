---
- name: Configure OPENVPN server
  hosts: openvpnprod
  tasks:
    - name: set hostname
      hostname: name={{ hostname }}
    
    - name: clean easy-rsa
      yum: name=easy-rsa state=absent

    - name: clean openvpn
      yum: name=openvpn state=absent

    - name: clean openvpn-ldap
      yum: name=openvpn-auth-ldap state=absent
 
    - name: Clean vpn configs
      file: state=absent path="{{ vpn_confdir }}"
      
    - name: isntall epel
      yum: name=epel-release state=latest
      
    - name: isntall easy-rsa
      yum: name=easy-rsa state=latest
      
    - name: install openvpn
      yum: name=openvpn state=latest
      
    - name: install openvpn-ldap
      yum: name=openvpn-auth-ldap state=latest

    - name: Creates directory
      file: path={{ vpn_confdir }}easy-rsa state=absent
      
    - name: stat easy-rsa
      stat: path=/usr/share/easy-rsa
      register: easy_stat
      
    - name: Creates copy of easy-rsa
      command: cp -r /usr/share/easy-rsa {{ vpn_confdir }}
      
    - name: update vars
      lineinfile: 
        state: present
        dest: "{{ vpn_confdir }}easy-rsa/2.0/vars"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - { regexp: 'KEY_COUNTRY=', line: 'export KEY_COUNTRY="{{ country }}"' }
        - { regexp: 'KEY_PROVINCE=', line: 'export KEY_PROVINCE="{{ province }}"' }
        - { regexp: 'KEY_CITY=', line: 'export KEY_CITY="{{ city }}"' }
        - { regexp: 'KEY_ORG=', line: 'export KEY_ORG="{{ org }}"' }
        - { regexp: 'KEY_EMAIL=', line: 'export KEY_EMAIL="{{ email }}"' }
        - { regexp: 'KEY_OU=', line: 'export KEY_OU="{{ ou }}"' }
        - { regexp: 'KEY_SIZE=', line: 'export KEY_SIZE={{ key_size }}' }
        - { regexp: 'KEY_EXPIRE=', line: 'export KEY_EXPIRE={{ key_expire }}' }
        - { regexp: 'CA_EXPIRE=', line: 'export CA_EXPIRE={{ ca_expire }}' }
        - { regexp: 'KEY_NAME=', line: 'export KEY_NAME="{{ key_name }}"' }
        - { regexp: 'KEY_CN=', line: 'export KEY_CN="{{ ansible_hostname }}"' }
        
    - name: update build-ca
      lineinfile:
        dest: "{{ vpn_confdir }}easy-rsa/2.0/build-ca"
        regexp: 'EASY_RSA/pkitool'
        line: '"$EASY_RSA/pkitool" --initca $*'
        
    - name: update build-key-server
      lineinfile:
        dest: "{{ vpn_confdir }}easy-rsa/2.0/build-key-server"
        regexp: 'EASY_RSA/pkitool'
        line: '"$EASY_RSA/pkitool" --server $*'
        
    - name: update build-key
      lineinfile:
        dest: "{{ vpn_confdir }}easy-rsa/2.0/build-key"
        regexp: 'EASY_RSA/pkitool'
        line: '"$EASY_RSA/pkitool" $*'
        
    - name: Create CA and server keys
      shell: "source ./vars && ./clean-all && ./build-ca && ./build-key-server server && ./build-dh"
      args:
        chdir: "{{ vpn_confdir }}easy-rsa/2.0/"
    
    - name: update key attributes 
      lineinfile:
        dest: "{{ vpn_confdir }}easy-rsa/2.0/keys/index.txt.attr"
        regexp: 'unique_subject'
        line: 'unique_subject = no'
    
    - name: Creates copy of easy-rsa
      command: cp -r {{ vpn_confdir }}easy-rsa/2.0/keys/ {{ vpn_confdir}}
      
    - name: create openVPN config
      template: src=templates/server.conf.j2 dest={{ vpn_confdir }}server.conf

    - name: create openVPN-ldap config
      template: src=templates/auth-ldap.conf.j2 dest={{ vpn_confdir }}/auth/ldap.conf
      
    - name: check if firewalld exists
      stat: path=/lib/systemd/system/firewalld.service
      register: firewalld_st
      
    - name: check if iptables.service exists
      stat: path=/lib/systemd/system/iptables.service
      register: iptables_st
      
    - name: disable firewalld
      service:
        name: firewalld
        enabled: no
        state: stopped
      when: firewalld_st.stat.exists == True

    - name: install iptables
      yum: name=iptables-services  state=latest
      
    - name: enable iptables-services
      service:
        name: iptables
        enabled: yes
        state: started
      when: iptables_st.stat.exists == True

    - name: iptables rules INPUT
      iptables:
        chain: INPUT
        action: insert
        protocol: "{{ vpn_proto }}"
        destination_port: "{{ vpn_port }}"
        jump: ACCEPT

    - name: iptables rules FORWARD
      iptables:
        chain: FORWARD
        action: insert
        jump: ACCEPT

    - name: iptables rules POSTROUTING
      iptables:
        table: nat
        chain: POSTROUTING
        source: "{{  internal_net_ip }}/{{ internal_net_mask }}"
        out_interface: "{{ ansible_default_ipv4.interface }}"
        jump: MASQUERADE

    - name: save iptables rules
      shell: "iptables-save > /etc/sysconfig/iptables"
      
    - name: enable iptables-services
      service:
        name: iptables
        enabled: yes
        state: restarted
     
    - name: get public IP
      ipify_facts: 

    - name: read ca_cert
      slurp:
        src: "{{ vpn_confdir }}/keys/ca.crt"
      register: ca_cert

    - name: generate client conf
      template: src=templates/client.ovpn.j2 dest={{ vpn_confdir }}client.ovpn

    - name: create client package
      file: path={{ vpn_confdir }}client state=directory

    - name: copy certs and config
      command: 
        cp  {{ vpn_confdir }}{{ item }} {{ vpn_confdir}}client/
      with_items:
        - keys/ca.crt
        - client.ovpn
        
    - name: enable routing
      lineinfile:
        dest: "/etc/sysctl.conf"
        insertafter: 
        line: 'net.ipv4.ip_forward = 1'
        
    - name: reload sysctl
      command: sysctl -p

    - name: restart openVPN server
      systemd: name=openvpn@server state=restarted enabled=yes

    
    - name: fetching client config file
      fetch:
        src: "{{ vpn_confdir }}client/client.ovpn"
        dest: client.ovpn
        flat: yes
