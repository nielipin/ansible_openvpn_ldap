    - name: install openvpn
      yum: name=openvpn state=latest
      
    - name: install openvpn-ldap
      yum: name=openvpn-auth-ldap state=latest
      
    - name: create openVPN config
      template: src=templates/server.conf.j2 dest={{ vpn_confdir }}server.conf

    - name: create openVPN-ldap config
      template: src=templates/auth-ldap.conf.j2 dest={{ vpn_confdir }}/auth/ldap.conf
      
    - name: check if firewalld exists
      stat: path=/lib/systemd/system/firewalld.service
      register: firewalld_st
      
    - name: check if iptables.service exists
      stat: path=/lib/systemd/system/iptables.service
      register: iptables_st
      
    - name: disable firewalld
      service:
        name: firewalld
        enabled: no
        state: stopped
      when: firewalld_st.stat.exists == True

    - name: install iptables
      yum: name=iptables-services  state=latest
      
    - name: enable iptables-services
      service:
        name: iptables
        enabled: yes
        state: started
      when: iptables_st.stat.exists == True

    - name: iptables rules INPUT
      iptables:
        chain: INPUT
        action: insert
        protocol: "{{ vpn_proto }}"
        destination_port: "{{ vpn_port }}"
        jump: ACCEPT

    - name: iptables rules FORWARD
      iptables:
        chain: FORWARD
        action: insert
        jump: ACCEPT

    - name: iptables rules POSTROUTING
      iptables:
        table: nat
        chain: POSTROUTING
        source: "{{  internal_net_ip }}/{{ internal_net_mask }}"
        out_interface: "{{ ansible_default_ipv4.interface }}"
        jump: MASQUERADE

    - name: save iptables rules
      shell: "iptables-save > /etc/sysconfig/iptables"
      
    - name: enable iptables-services
      service:
        name: iptables
        enabled: yes
        state: restarted
     
    - name: get public IP
      ipify_facts: 

    - name: read ca_cert
      slurp:
        src: "{{ vpn_confdir }}/keys/ca.crt"
      register: ca_cert

    - name: generate client conf
      template: src=templates/client.ovpn.j2 dest={{ vpn_confdir }}client.ovpn

    - name: create client package
      file: path={{ vpn_confdir }}client state=directory

    - name: copy certs and config
      command: 
        cp  {{ vpn_confdir }}{{ item }} {{ vpn_confdir}}client/
      with_items:
        - keys/ca.crt
        - client.ovpn
        
    - name: enable routing
      lineinfile:
        dest: "/etc/sysctl.conf"
        insertafter: 
        line: 'net.ipv4.ip_forward = 1'
        
    - name: reload sysctl
      command: sysctl -p

    - name: restart openVPN server
      systemd: name=openvpn@server state=restarted enabled=yes

    
    - name: fetching client config file
      fetch:
        src: "{{ vpn_confdir }}client/client.ovpn"
        dest: client.ovpn
        flat: yes
